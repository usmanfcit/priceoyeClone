"""class Category(models.Model):
    category_id = models.AutoField(primary_key=True)
    category_name = models.CharField(max_length=100)

    def __str__(self):
        return self.category_name


class Vendor(models.Model):
    vendor_id = models.AutoField(primary_key=True)
    vendor_name = models.CharField(max_length=100)

    def __str__(self):
        return self.vendor_name


class Product(models.Model):
    product_id = models.AutoField(primary_key=True)
    category = models.ForeignKey(Category, on_delete=models.CASCADE)
    brand_name = models.CharField(max_length=100)
    title = models.CharField(max_length=100)
    price = models.CharField(max_length=100)
    original_price = models.CharField(max_length=100, blank=True, null=True)
    discount = models.CharField(max_length=50, blank=True, null=True)
    image_url = models.URLField(max_length=200)
    specifications = models.JSONField()  # Using JSONField to store specifications

    def __str__(self):
        return self.title


class PriceHistory(models.Model):
    history_id = models.AutoField(primary_key=True)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    date = models.DateField()
    price = models.IntegerField()

    def __str__(self):
        return f"{self.product.title} - {self.date}"


class Orders(models.Model):
    order_id = models.AutoField(primary_key=True)
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    order_date = models.DateField()
    amount = models.IntegerField()

    def __str__(self):
        return f"Order {self.order_id} by {self.user.name}"


class OrderItem(models.Model):
    order_item_id = models.AutoField(primary_key=True)
    order = models.ForeignKey(Orders, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    quantity = models.IntegerField()
    price = models.IntegerField()

    def __str__(self):
        return f"{self.product.title} in Order {self.order.order_id}"
"""
